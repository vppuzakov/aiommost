[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "aiommost"
dynamic = ["version"]
description = "Mattermost client"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = [
    "mattermost",
    "asyncio",
    "client",
]
authors = [
    {name = "Vladimir Puzakov", email = "vppuzakov@rambler.ru"},
]
classifiers=[
    'Development Status :: 4 - Beta',
    'Environment :: Web Environment',
    'Intended Audience :: Developers',
    'Intended Audience :: Information Technology',
    'Intended Audience :: System Administrators',
    'License :: OSI Approved :: BSD License',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Operating System :: OS Independent',
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
]
dependencies = [
    "orjson",
    "httpx",
    "pydantic>2,<3",
]

[project.optional-dependencies]
test = [
    "coverage[toml]>=6.5",
    "faker",
    "pytest",
    "pytest-asyncio>=0.21.1",
    "pytest-clarity>=1.0.1",
    "pytest-coverage>=0.0",
    "pytest-dotenv>=0.5.2",
    "pytest-mock>=3.14.0,<4",
    "pytest-testdox>=3.1.0",
]

lint = [
    "ruff",
    "mypy",
]

dev = [
  "python-lsp-server[all]",
  "ruff-lsp",
  "pylsp-mypy",
]


[project.urls]
Source = "https://github.com/vppuzakov/aiommost"
Issues = "https://github.com/vppuzakov/aiommost/issues"


[tool.hatch.version]
path = "aiommost/__init__.py"

[tool.hatch.envs.default]
python = "3.10"
type = "virtual"

[tool.hatch.envs.test]
features = ["test"]

[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.test.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]


[tool.hatch.envs.lint]
features = ["test", "lint"]


[tool.hatch.envs.lint.scripts]
typing = "mypy --cache-fine-grained --follow-imports normal {args:aiommost}"
style = [
  "ruff check --fix {args:.}",
]
fmt = [
  "ruff check --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]


[tool.hatch.envs.dev]
python = "3.10"
path = ".venv"
features = ["lint", "test", "dev"]


[tool.hatch.envs.dev.scripts]
typing = "mypy {args:aiommost tests}"
style = [
  "ruff check {args:.}",
]
fmt = [
  "ruff check --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]


[tool.coverage.run]
source_pkgs = ["aiommost", "tests"]
branch = true
parallel = true
omit = []


[tool.coverage.paths]
aiommost = ["aiommost", "*/aiommost/aiommost"]
tests = ["tests", "*/aiommost/tests"]


[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]


[tool.hatch.build.targets.wheel]
packages = ["aiommost"]
